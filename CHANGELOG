Interim changes since PyNDN v2.0beta3 (2015-05-05)
--------------------------------------------------

Changes
* http://redmine.named-data.net/issues/2624 By default, throw an exception when
  using the deprecated NDNx and binary XML wire format. To enable support while
  you upgrade your code to use NFD, in your main application set
  WireFormat.ENABLE_NDNX = True
* http://redmine.named-data.net/issues/1921 In Face, added getMaxNdnPacketSize().
  expressInterest and putData throw an exception if the encoded size exceeds it.
* http://redmine.named-data.net/issues/2566 In Face, added setInterestFilter. In
  registerPrefix, make the onInterest callback optional.
* Face: In registerPrefix, changed the onInterest callback to pass interestFilterId
  instead of registeredPrefixId.
* http://redmine.named-data.net/issues/2579 In registerPrefix and setInterestFilter,
  support the onInterest callback form
  onInterest(prefix, interest, face, interestFilterId, filter).
  The new callback form is passed the Face instead of Transport so that you can
  supply the Data with face.putData(). It also takes the InterestFilter supplied
  to setInterestFilter.
* MemoryContentCache: In registerPrefix, changed the onDataNotFound callback to call
  onDataNotFound(prefix, interest, face, interestFilterId, filter).
  If your application uses onDataNotFound, you must update your callback function.
* In Interest setter methods, return this so that you can chain calls to update values.
* Added class util/SegmentFetcher, ported from ndn-cxx. Use it in examples test_list_rib.
* http://redmine.named-data.net/issues/2532#change-8836 In Face.registerPrefix,
  if connected to a remote NFD then use localhop to do remote registration. (For
  remote registration, the remote NFD must be configured for localhop_security.)
  Added the optional method Face.isLocal() for the application to check if the
  connection is local.
* In MemoryContentCache, added support for storePendingInterest. add(data) will
  check if the added Data packet satisfies any pending interest. You can use
  getStorePendingInterest() for onDataNotFound in registerPrefix().
* Moved tests which need NFD from tests/unit_tests to tests/integration_tests.
* examples: Added test_list_channels, test_list_faces, test_list_rib and
  test_register_route to query NFD.
* examples: In repo_ng added basic_insertion.py and watched_insertion.py to
  show interaction with the repo-ng repository.
* examples: Removed test_encode_decode_forwarding_entry and
  test_publish_async_ndnx because NDNx support is deprecated.

Deprecated
* Deprecated support for NDNx and binary XML. See WireFormat.ENABLE_NDNX above.
* In Face, deprecated registerPrefix where the onInterest callback has the form
  onInterest(prefix, interest, transport, interestFilterId). Use the
  registerPrefix where onInterest has the form
  onInterest(prefix, interest, face, interestFilterId, filter) so you can call
  face.putData().

Bug fixes
* http://redmine.named-data.net/issues/2478 Fix ProtobufTlv for Python 3.
* http://redmine.named-data.net/issues/2544 Fix test_chrono_chat bug affecting OS X 10.10.
* http://redmine.named-data.net/issues/2758 ControlParameters with empty name not properly encoded.

PyNDN v2.0beta3 (2015-02-03)
----------------------------

Changes
* http://redmine.named-data.net/issues/2388 Moved example programs from "tests" to "examples".
* In KeyChain.createIdentity, added an optional KeyParams argument.
* Unit tests: Added test-der-encode-decode tests for CertificateExtension.

Bug fixes
* http://redmine.named-data.net/issues/2472 Fixes to support Python 3

PyNDN v2.0beta2 (2014-12-23)
----------------------------

Changes
* Support getter and setter properties in the classes Interest, Data, MetaInfo,
  KeyLocator and ForwardingFlags, plus the internal ForwardingEntry and
  ControlParameters.
* In Name, support slice notation to call getSubName, e.g. name[2:4].
* Added ChronoSync2013 and test_chrono_chat.py.
* In Name, added wireEncode and wireDecode.
* In MetaInfo, added get/setFinalBlockId (replaces the deprecated get/setFinalBlockID).
* In MemoryContentCache, added unregisterAll.
* Added ConfigPolicyManager for heirarchical verification using an NDN config file. (Thanks to Adeola Bannis.)
* Added DigestSha256Signature. Support encoding/decoding it in interests and data packets.
* In KeyChain, added signWithSha256.
* In registerPrefix, use logging.info to log success or the reason for failure.
* In each __init__.py, added import statements for each module (required by pylint).
* In unit tests, added test_name_conventions, test-policy_manager and test_verification_rules.
* Unit tests: In test-data-methods, added VerifyDigestSha256.
* Unit tests: In test-interest-methods, added VerifyDigestSha256.

Deprecated
* In MetaInfo, deprecated get/setFinalBlockID. Use get/setFinalBlockId.

PyNDN v2.0beta1 (2014-08-31)
----------------------------

Changes
* In Name.appendSegment and appendVersion, encode the number as nonNegativeInteger which is always 1, 2, 4 or 8 bytes.
  This means that appendSegment(0) now encodes as %00%00 instead of just %00.
* In Name, added appendSegmentOffset, appendTimestamp and appendSequenceNumber.
* In Name.Component, added toSegmentOffset, toTimestamp and toSequenceNumber.

Bug fixes
* http://redmine.named-data.net/issues/1925 Should encode non-negative integers 253 through 255 as one byte.
* http://redmine.named-data.net/issues/1955 Return the registeredPrefixId from registerPrefix.

PyNDN v2.0alpha3 (2014-08-14)
-----------------------------

Changes
* Implemented SelfVerifyPolicyManager for use with KeyChain.verifyData, and use
  it in the sample test_encode_decode_data.
* Implemented OSXPrivateKeyStorage to use keys in the OS X Keychain.
* Performance improvements for Python versions before 3.3.
* Name: Added methods appendSegment and appendVersion.
* Name: Added method equals(name) and operators __eq__ and __ne__.
* Name: Added method compare(other) and operators __lt__, etc.
* Name: Added a default Name.Component constructor to make a zero-length value.
* Renamed test_publish_async to test_publish_async_ndnx.
* Added test-publish-async-nfd.
* Added ThreadsafeFace which uses asyncio.
* Added test_get_async_threadsafe 
* Renamed internal class Tlv1_0a2WireFormat to Tlv0_1WireFormat.
* COPYING: Changed the license to LGPLv3.
* In Blob, added __str__ operator.
* Added encoding.ProtobufTlv for converting a Protobuf message object to TLV encoding.
* In test_encode_decode_data and test_encode_decode_benchmark, change the RSA test key to 2048 bits.
* Added UnixTransport. If using the default Face(), try to connect using a Unix socket.
* Added MemoryContentCache. See http://named-data.net/doc/ndn-ccl-api/memory-content-cache.html .
* KeyChain: added verifyInterest.
* Added instructions for building the Sphinx documentation.
* Added setup.py to support easy_install.  Added instructions in the README file.

Deprecated
* MemoryPrivateKeyStorage: Deprecated setKeyPairForKeyName without an explicit keyType. Use
  setKeyPairForKeyName passing the explicit key type such as KeyType.RSA.

Bug fixes
* http://redmine.named-data.net/issues/1333 Make Interest MustBeFresh default True.
* http://redmine.named-data.net/issues/1337 Fix FinalBlockID encoding.
* http://redmine.named-data.net/issues/1647 Trollius 0.3 doesn't import asyncio.
* For TLV packets over UDP, ignore packets starting with 0x80.
* Fix bug for encoding/decoding the TLV Interest PublisherPublicKeyLocator.
* In the Blob constructor, Name.append, etc. treat a Python 2 str as a raw string.

Support to be added soon:
* Package install support.

PyNDN v2.0alpha2 (2014-02-27)
-----------------------------

Changes
* Added UdpTransport in module pyndn.transport to support a UDP connection.
* In Blob, added method toRawStr and static method fromRawStr.

Bug fixes
* Fix Interest.setExclude to properly copy the Exclude object.

PyNDN v2.0alpha1 (2014-02-21)
-----------------------------

This is the Python 2.0 initial release, with support for the NDN-TLV wire format in pure Python.
